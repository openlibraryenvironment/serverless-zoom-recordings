service: zoom-recordings
frameworkVersion: '2 || 3'

provider:
  name: aws
  runtime: python3.8
  architecture: arm64
  memorySize: 128
  lambdaHashingVersion: '20201221'
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  logRetentionInDays: ${opt:logretention, env:AWS_LOG_RETENTION, '14'}
  httpApi:
    useProviderTags: true
    cors: true
  tags:
    Purpose: ${self:custom.stack_name}
  deploymentBucket:
    tags:
      Purpose: ${self:service}
  # iam:
  #   role:
  #     statments:	

  environment:
    DEPLOYMENT_STAGE: ${self:custom.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:ListBucket'
      Resource: 'arn:aws:s3:::${self:custom.config.RECORDINGS_S3_BUCKET}'
    - Effect: Allow
      Action:
        - 's3:PutObject'
      Resource: 'arn:aws:s3:::${self:custom.config.RECORDINGS_S3_BUCKET}/*'

custom:
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:service}-${self:custom.stage}
  bucket_prefix: org.openlibraryfoundation
  # Store configuration and secrets in `config.yml`.  See
  # http://www.goingserverless.com/blog/keeping-secrets-out-of-git
  config: ${file(config.yml):${self:custom.stage}}

  pythonRequirements:
    pythonBin: .venv/bin/python
    dockerizePip: false


  # customDomain:
  #   domainName: ${self:custom.config.HOSTNAME}
  #   stage: ${self:custom.stage}
  #   basePath: ${self:custom.config.BASE_PATH}
  #   certificateName: ${self:custom.config.CERTIFICATE_NAME}
  #   createRoute53Record: true
  #   endpointType: 'regional'
  #   securityPolicy: tls_1_2
  #   apiType: http
  #   autoDomain: false
	
  prune:
    automatic: true
    number: 3



functions:
  zoom_webhook:
    handler: serverless_zoom_recordings.zoom_webhook.handler
    events:
      - httpApi:
          path: /ingest/zoom_webhook
          method: post
    environment:
      BASE_PATH: ${self:custom.config.BASE_PATH}
      ZOOM_SECRET_TOKEN: ${self:custom.config.ZOOM_SECRET_TOKEN}
      MINIMUM_MEETING_DURATION: ${self:custom.config.MINIMUM_MEETING_DURATION}
      INGEST_ZOOM_RECORDING_STEP_MACHINE: !Ref IngestZoomRecordingStateMachine
    iamRoleStatements:
      - Effect: Allow
        Action: states:StartExecution
        Resource: !Ref IngestZoomRecordingStateMachine

  ingest_metadata:
    handler: serverless_zoom_recordings.ingest_metadata.handler
    environment: 
      RECORDINGS_S3_BUCKET: ${self:custom.config.RECORDINGS_S3_BUCKET}
      ZOOM_API_KEY: ${self:custom.config.ZOOM_API_KEY}
      ZOOM_API_SECRET: ${self:custom.config.ZOOM_API_SECRET}

  retrieve_recording:
    handler: serverless_zoom_recordings.retrieve_recording.handler
    environment: 
      RECORDINGS_S3_BUCKET: ${self:custom.config.RECORDINGS_S3_BUCKET}
      ZOOM_API_KEY: ${self:custom.config.ZOOM_API_KEY}
      ZOOM_API_SECRET: ${self:custom.config.ZOOM_API_SECRET}

stepFunctions:
  stateMachines:
    ingestZoomRecording:
      id: IngestZoomRecordingStateMachine
      name: ingestZoomRecording-${self:custom.stage}
      loggingConfig:
        level: ERROR
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [ingestZoomRecordingsLog, Arn]
      definition:
        Comment: "Move recordings from Zoom to S3"
        StartAt: IngestMetadata
        States:
          IngestMetadata:
            Type: Task
            Resource:
              Fn::GetAtt: [ingest_metadata, Arn]
            Next: RetrieveRecordingMap
          RetrieveRecordingMap:
            Type: Map
            ItemsPath: "$.recordings_map_input"
            ResultPath: "$.recordings_map_results"
            MaxConcurrency: 5
            Iterator:
              StartAt: RetrieveRecording
              States:
                RetrieveRecording:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [retrieve_recording, Arn]
                  End: true
            Next: Success
          Success:
            Type: Succeed

# CloudFormation resource templates
resources:
  Description: Move Recordings from Zoom to S3 ${self:custom.stage} â€” Serverless.com CloudFormation template
  Resources:
    ingestZoomRecordingsLog:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/statefunction/${self:custom.stack_name}
        RetentionInDays: ${self:provider.logRetentionInDays}

package:
  include:
    # - something
  exclude:
    - node_modules/**
    - bin/nodeenv
    - nodeenv*
    - .venv/**
    - env/**
    - __pycache__
    - config.yml
    - sample-messages/**


plugins:
  - serverless-python-requirements
#  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-step-functions
  - serverless-iam-roles-per-function